<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	<context:component-scan base-package="com.jswiente.phd.prototype" />

	<!-- <jdbc:initialize-database data-source="jobRepositoryDataSource"> <jdbc:script 
		location="${batch.schema.script}" /> </jdbc:initialize-database> -->

	<bean id="jobRepositoryDataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${batch.jdbc.url}" />
		<property name="username" value="${batch.jdbc.user}" />
		<property name="password" value="${batch.jdbc.password}" />
		<property name="maxActive" value="${batch.jdbc.maxActive}" />
		<property name="maxWait" value="${batch.jdbc.maxWait}" />
	</bean>

	<bean id="batchTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		lazy-init="true">
		<property name="dataSource" ref="jobRepositoryDataSource" />
	</bean>

	<batch:job-repository id="jobRepository"
		data-source="jobRepositoryDataSource" transaction-manager="batchTransactionManager"
		isolation-level-for-create="DEFAULT" />

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="jobExplorer"
		class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
		<property name="dataSource" ref="jobRepositoryDataSource" />
	</bean>

	<bean id="jobRunIdIncrementer" class="com.jswiente.phd.prototype.batch.JobRunIdIncrementer" />

	<batch:job id="ratingJob" incrementer="jobRunIdIncrementer">
		<batch:step id="ratingStep">
			<batch:tasklet transaction-manager="batchTransactionManager"
				start-limit="100">
				<batch:chunk reader="simpleCdrItemReader" processor="simpleCdrProcessor"
					writer="costedEventWriter" commit-interval="1000" />
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<batch:job id="ratingMultiThreadedJob" incrementer="jobRunIdIncrementer">
		<batch:step id="ratingMultiThreadedStep">
			<batch:tasklet transaction-manager="batchTransactionManager"
				start-limit="100"
				task-executor="taskExecutor" throttle-limit="${batch.step.throttle-limit}">
				<batch:chunk reader="simpleCdrMultiThreadedItemReader" processor="simpleCdrProcessor"
					writer="costedEventWriter" commit-interval="1000" />
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${batch.taskExecutor.corePoolSize}"/>
		<property name="maxPoolSize" value="${batch.taskExecutor.maxPoolSize}"/>
	</bean>

	<!-- Rating Batch Processor -->

	<bean id="simpleCdrItemReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource" value="file:#{jobParameters[CamelFileAbsolutePath]}" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer" ref="simpleCdrTokenizer" />
				<property name="fieldSetMapper" ref="simpleCdrFieldSetMapper" />
			</bean>
		</property>
	</bean>

	<bean id="simpleCdrMultiThreadedItemReader" class="com.jswiente.phd.prototype.batch.MultiThreadedFlatFileItemReader" 
		scope="step">
		<property name="delegate" ref="simpleCdrItemReader" />
	</bean>

	<bean id="simpleCdrTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<property name="names"
			value="recordId,sequenceNum,eventSource,callingParty,calledParty,startDate,endDate,eventType,flatEvent" />
		<property name="delimiter" value=";" />
	</bean>

	<bean id="simpleCdrFieldSetMapper"
		class="com.jswiente.phd.prototype.batch.rating.SimpleCdrFieldSetMapper" />

	<bean id="simpleCdrProcessor" class="com.jswiente.phd.prototype.batch.BatchDataProcessor">
		<property name="dataProcessor">
			<bean class="com.jswiente.phd.prototype.core.RatingProcessor" />
		</property>
	</bean>

	<bean id="costedEventWriter"
		class="com.jswiente.phd.prototype.batch.rating.CostedEventWriter" />

</beans>
